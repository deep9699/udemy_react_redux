#index.js:
It includes 3 things 
1)import react and reactDOM
import React from 'react'
import ReactDOM from 'react-dom'

2)create react component
const App = ()=>{
    return <div>Hi there!</div>
}


3)Take the react component and show it on the screen
ReactDOM.render(<App/>,document.querySelector("#root"))
where root is and div tag inside body in index.html

#JSX:

->JSX is not HTML.
->Bebel converts JSX into simple JS.


Difference in HTMl & JSX
1)Style 

html :
<button style="background-color:blue;color:white">Submit</button

JSX : 
<button style={{backgroundColor:'blue',color:'white'}}>Submit</button>


2)use className instead of class

html :
<label class="label" for="name">Enter Your Name</label>

JSX :
<label className="label" for="name">Enter Your Name</label>


3)use {} to print any js variable in JSX

=>const buttonText="Click Me"

<button style={{backgroundColor:'blue',color:'white'}}>{buttonText}</button>


=>function call :
function getButtonText()
{
    return "Click Me"
}

<button style={{backgroundColor:'blue',color:'white'}}>{getButtonText()}</button>

=>All other things are allowed inside {} except JS objects.

//NOT ALLOWED
const buttonText={
	text:"click me"
}

<button style={{backgroundColor:'blue',color:'white'}}>{buttonText}</button>

//ALLOWED

<button style={{backgroundColor:'blue',color:'white'}}>{buttonText.text}</button>

4)user htmlFor instead of for



#Three tenets of components

1)component Nesting:
	-component can be shown inside  of another

2)component Resuability
	-want to make component that can be reusable
	
3)component Configuration
	-should be able to configure a component when it is created.
	
#Props :

->Props is a system to pass data from parent component to childe component
->We can pass multiple props
->we can pass an component in props which can be access as props.children.

           <ApprovalCard>
               {/* props.children in ApprovalCard */}

           <CommentDetail author="Deep" timeAgo="Today at 4:45PM" comment="Nice Blog!" image={Faker.image.image()}></CommentDetail>

           </ApprovalCard>

#Components :

=>class Components vs function Components

->earlier we can only render JSX inside functional Components but using HOOKS we can also do everything that class component can in functional component



=>CLASS COMPONENT:	

->Rules 
1)Must be JS class
2)Must extend subclass React.component
3)Must define render method which return JSX.

#State :

->Rules:
1)It is only used with Classes
2)Do not confuse between props and state
3)'State' is JS object which contains data relevant to component
4)updating value of State causes to component to instantly rerender.
5)State must be initialized when a component is created
6)State can be only updating using 'setState' method.

->We never use direct assignment with the state property.


#Component Life Cycle 

->Constructor
->render
-content visible on screen
->componentDidMount (one time when component did mount)
-sit and wait for updates (update means state change)
->componentDidUpdate (when state updates / called just after component rerender)
-sit and wait until this component	is not longer shown
->componentWillUnmount


#why lifecycle methods 

->Constructor :
	Good place to do one time setup 

->render :
	return JSX 
	
->componentDidMount :
	Good place for data loading (API call)
	
->componentDidUpdate :
	Good place for data loading when state/props are changed.
	
->componentWillUnmount :
	Good place to clean up
	
#Ways to initialized State

1)Using constructor

    constructor(props){
        super(props);
        this.state={
            lat:null,
            errorMessage:''
        };
        
    }

2)Alternate way (Bebel converts it and put it inside contructor)

this.state= { lat:null ,errorMessage:'' }

#defaultProps :

->In functional component we can set defaultProps as 

Spinner.defaultProps={
    message:"Loading..."
}


#EventHandling

=> 2 ways to do that 

1)


onInputChange(event){
        console.log(event.target.value);
    }

<input className="field" type="text" onChange={this.onInputChange} />

2)
<input className="field" type="text" onChange={(event)=>console.log(event.target.value)} />



#Controlled v/s Uncontrolled component

1)Uncontrolled :


onInputChange(event){
        console.log(event.target.value);
    }

<input className="field" type="text" onChange={this.onInputChange} />


=>In which in any point or any state of time if we want to know the value of the input box then we are suppose to go to the HTML DOM and get it from value attribute.

2)Controlled :

state={term:''}

 <input className="field" type="text" value={this.state.term} onChange={(e)=>this.setState({term:e.target.value})} />

=>In which in any point or any state of time if we want to know the value of the input box then we can easily get it from the state of the React.
->even we go to the HTML DOM to get the value it also returns the state's value.

->certain task are so easy with the Controlled component like to have default value , then only accpet Capital letters etc.


#Input onSubmit/onChange function call Error : cannot read property State of undefined


solution 1:

inside constructor bind this with the function call

e.g.

constructor(props)
{
	super(props);
	this.onFormSubmit=this.onFormSubmit.bind(this);
}

solution 2:

replace normal Function into Arrow function as Arrow function as functionality to bind everything inside the function

onFormSubmit=(event)=>{
        event.preventDefault();

        console.log(this.state.term);
    }
	
solution 3:

replace onSubmit/onChange event with the callback arrow function.

<form onSubmit={(e)=>{this.onFormSubmit(e)}} className="ui form">


#Fetch Records:

->React is not responsible for call REST calls.

Fot the same we can use any 3rd party API or any fetch which is already inside modern browsers.


=>there are 2 ways to fetch the reponse from the axios

1 : using .then method

 axios.get("https://api.unsplash.com/search/photos",{
            params:{ query:term },
            headers:{
                Authorization: 'Client-ID IkOFLUtmY4O9CwyxYAwni69q875KasR9sFG1v92o5mE'
            }
        }).then((Response)=>{
            console.log(Response.data.results);
        })
		
		
2: async await

async onSearchSubmit(term){
       const response = await axios.get("https://api.unsplash.com/search/photos",{
            params:{ query:term },
            headers:{
                Authorization: 'Client-ID IkOFLUtmY4O9CwyxYAwni69q875KasR9sFG1v92o5mE'
            }
        })
        
        console.log(response.data.results);
    }
	
#React Refs

->Gives access direct to single DOM element.

for that call React.createRef() method which will return the DOM element.


#React.Fragment 

->we can use it instead of div 

#Hooks :

->useState : Function that lets you use state inside functional component.

e.g :  
	const [activeIndex,setActiveIndex] = useState(null);
    setActiveIndex(5);

where :
activeIndex is a state property.

setActiveIndex is used for update the state value.

null is the default value of the activeIndex.


->useEffect :  Function that lets you use something like a lifecycle methods inside functional component.

- There are 3 ways to configure the hook to run some code automatically in one of the three scenarios.
1 -when component render for the first time
e.g useEffect(()=>{console.log('from useEffect')},[]);

2 -when component render for the first time and whenever it renders
e.g useEffect(()=>{console.log('from useEffect')});

3 -when component render for the first time and (whenever it renders and some piece of data has changed.)
useEffect(()=>{console.log('from useEffect')},[term]);


* we cannot direclty use asyc await inside the useEffect function .For that we have following 3 solutions

1 - With temp variable (Recommanded).

    useEffect(()=>{
        const search=async()=>{
            await axios.get("url");
        }

        search();
    },[term]);
	
2 - Withour temp variables.


    useEffect(()=>{
        (async()=>{
            await axios.get("url");
        })();

    },[term]);
	
3 - Promise


    useEffect(()=>{
        axios.get("url")
        .then((response)=>{
            console.log(response)
        })
    },[term]);

->useRef : Function that lets you create a 'ref' in a functional component.